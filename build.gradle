buildscript {
    repositories {
        jcenter()
        mavenCentral()
        if (enableOssSnapshots == 'true') {
            maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}
plugins {
    id "com.jfrog.bintray" version "1.2"
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'maven-publish'

task wrapper(type: Wrapper) {
    gradleVersion = '2.5'
}

repositories {
    mavenCentral()
    if (enableOssSnapshots == 'true') {
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    }
}

sourceSets {
    examples
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    testCompile 'junit:junit:4.+'
    testCompile "org.mockito:mockito-core:1.+"

     testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"

    compile "io.vertx:vertx-core:$vertxVersion"
    compile "io.vertx:vertx-jdbc-client:$vertxVersion"
    compile "io.vertx:vertx-mail-service:$vertxVersion"

    examplesCompile sourceSets.main.runtimeClasspath
    examplesCompile sourceSets.main.output
}


task runExample(dependsOn: [classes], type: JavaExec) {
    main = 'examples.route.RoutePackage'
    classpath = sourceSets.examples.runtimeClasspath
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

publishing {
    group = groupId
    version = project.version

    publications {
        mavenJava(MavenPublication) {
            if (plugins.hasPlugin('war')) {
                from components.web
            } else {
                from components.java
            }

            artifact sourcesJar
            artifact javadocJar
        }
    }
}

bintray {
    pkg {
        repo = 'maven'
        name = 'vertx3-lang-kotlin'
        user = project.hasProperty("bintray_user") ? project.bintray_user : null
        key = project.hasProperty("bintray_apiKey") ? project.bintray_apiKey : null

        publish = true
        publications = ['mavenJava']

        version {
            name = project.version
        }
    }
}
